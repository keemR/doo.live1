---
import ArticleGrid from './ArticleGrid.astro';
import LoadingSpinner from './LoadingSpinner.astro';
import type { Article } from '../../types';

interface Props {
  initialArticles: Article[];
}

const { initialArticles } = Astro.props;
---

<div class="infinite-scroll-container">
  <ArticleGrid articles={initialArticles} />
  <LoadingSpinner />
</div>

<script>
const LOAD_THRESHOLD = '100px';
const DEBOUNCE_DELAY = 300;

class ArticleLoader {
  private page = 1;
  private loading = false;
  private observer: IntersectionObserver;
  private container: HTMLElement | null;
  private loadingSpinner: HTMLElement | null;

  constructor() {
    this.container = document.getElementById('articles-container');
    this.loadingSpinner = document.querySelector('.loading-spinner');
    
    this.observer = new IntersectionObserver(
      this.handleIntersection.bind(this),
      { rootMargin: LOAD_THRESHOLD }
    );

    if (this.loadingSpinner) {
      this.observer.observe(this.loadingSpinner);
    }
  }

  private async handleIntersection(entries: IntersectionObserverEntry[]) {
    const isIntersecting = entries[0]?.isIntersecting;
    if (isIntersecting && !this.loading) {
      await this.loadMoreArticles();
    }
  }

  private async loadMoreArticles() {
    try {
      this.loading = true;
      this.showLoading();

      const response = await fetch(`/api/articles?page=${this.page}`);
      if (!response.ok) throw new Error('Failed to fetch articles');
      
      const articles = await response.json();
      if (!articles.length) {
        this.observer.disconnect();
        this.hideLoading();
        return;
      }

      this.renderArticles(articles);
      this.page++;
    } catch (error) {
      console.error('Error loading articles:', error);
    } finally {
      this.loading = false;
      this.hideLoading();
    }
  }

  private renderArticles(articles: any[]) {
    if (!this.container) return;
    
    articles.forEach((article, index) => {
      const articleElement = this.createArticleElement(article);
      this.container?.appendChild(articleElement);

      if ((index + 1) % 6 === 0) {
        const adElement = this.createAdElement();
        this.container?.appendChild(adElement);
      }
    });
  }

  private createArticleElement(article: any) {
    const div = document.createElement('div');
    div.className = 'article-card';
    div.innerHTML = `
      <article class="bg-white rounded-lg shadow-md overflow-hidden">
        <img src="${article.image}" alt="${article.title}" class="w-full h-48 object-cover">
        <div class="p-6">
          <span class="text-emerald-600 text-sm font-medium">${article.category}</span>
          <h3 class="text-xl font-bold text-gray-900 mt-2">
            <a href="${article.href}" class="hover:text-emerald-600">${article.title}</a>
          </h3>
          <p class="text-gray-600 mt-2">${article.description}</p>
        </div>
      </article>
    `;
    return div;
  }

  private createAdElement() {
    const div = document.createElement('div');
    div.className = 'md:col-span-2';
    div.innerHTML = `
      <div class="min-h-[280px] w-full bg-gray-100 flex items-center justify-center">
        <div class="text-center p-4">
          <div class="text-sm text-gray-500">Advertisement</div>
          <div class="ad-container"></div>
        </div>
      </div>
    `;
    return div;
  }

  private showLoading() {
    this.loadingSpinner?.classList.remove('hidden');
  }

  private hideLoading() {
    this.loadingSpinner?.classList.add('hidden');
  }
}

// Initialize the article loader when the DOM is ready
document.addEventListener('DOMContentLoaded', () => {
  new ArticleLoader();
});
</script>